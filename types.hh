#ifndef TYPES_HH
#define TYPES_HH

#include<string>
using namespace std;

typedef enum {
    PLUS__h,
    MINUS__h,
    MULT__h,
    DIV__h,
    UMINUS__h,
    COPY__h,
} op_type;

typedef enum {
    AND__h,
    OR__h,
    NOT__h,
} log_op_type;

typedef enum {
    NOT_EQUAL__h,
    EQUAL__h,
    GREATER_THAN__h,
    GREATER_THAN_EQUAL__h,
    LESS_THAN__h,
    LESS_THAN_EQUAL__h,
} rel_op_type;

typedef enum {
    INTEGER__h,
    FLOAT__h,
    BOOL__h,
    STRING__h,
    VOID__h,
} data_type;

typedef enum {
    v0,
    t0,
    t1,
    t2,
    t3,
    t4,
    t5,
    t6,
    t7,
    t8,
    t9,
    s0,
    s1,
    s2,
    s3,
    s4,
    s5,
    s6,
    s7,
    a0,
    zero, // $zero
    f2, 
    f4, 
    f6, 
    f8, 
    f10, 
    f12, 
    f14, 
    f16, 
    f18, 
    f20, 
    f22, 
    f24, 
    f26, 
    f28, 
    f30, 
    f0, 
    v1,
    invalid,
    gp, 
    sp,
    fp,
    ra
} reg;

typedef enum {
    read_,
    write_,
    iLoad_,
    goto_,
    store_,
    add_,
    sub_,
    mul_,
    div_,
    add_d_,
    sub_d_,
    mul_d_,
    div_d_,
    sgt_,
    sge_,
    slt_,
    sle_,
    seq_,
    sne_,
    sgt_d_,
    sge_d_,
    slt_d_,
    sle_d_,
    seq_d_,
    sne_d_,
    bgtz_,
    load_,
    load_d_,
    store_d_,
    iLoad_d_,
    load_addr_,
    uminus_,
    uminus_d_,
    move_,
    move_d_,
    movf_,
    movt_,
    beq_,
    bne_,
    blez_,
    bclt_,
    bclf_,
    add_i_,
    and_,
    or_,
    not_,
    push_,
    pop_,
    call_,
} instruction;

typedef enum {
    _push,
    _pop,
    _iLoad,
    _iLoad_d,
    _load,
    _load_d,
    _load_addr,
    _store,
    _store_d,
    _and,
    _or,
    _not,
    _move,
    _move_d,
    _movf,
    _movt,
    _beq,
    _bne,
    _bgtz,
    _bgez,
    _bltz,
    _blez,
    _bclt,
    _bclf,
    _goto,
    _call,
    _return,
    _label,
    _add,
    _sub,
    _mul,
    _div,
    _add_i,
    _uminus,
    _add_d,
    _sub_d,
    _mul_d,
    _div_d,
    _uminus_d,
    _slt, 
    _sle, 
    _sgt, 
    _sge, 
    _seq, 
    _sne, 
    _seq_d, 
    _slt_d, 
    _sle_d,
    _sgt_d,
    _sge_d,
    _sne_d,
    _write,
    _read,
    _nop,
    _li,
    _li_d,
    _lw,
    _l_d,
    _la,
    _lw_w,
    _sw,
    _s_d,
    _xori,
    _mov_d,
    _j,
    _jal,
    _neg,
    _neg_d,
    _c_eq_d,
    _c_lt_d,
    _c_le_d,
    _syscall,
    _jr,
} asm_instruction;

typedef enum {
    variable_tac_opd,
    temporary_tac_opd,
    saved_temporary_tac_opd,
    label_tac_opd,
    int_const_tac_opd,
    double_const_tac_opd,
    string_const_tac_opd,
} tac_opd;

string convert_reltype_to_string(rel_op_type op);

string convert_datatype_to_string(data_type x);

string convert_optype_to_string(op_type op);

string convert_logtype_to_string(log_op_type op);

#endif